generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  VENDOR
  AGENCY
  ADMIN
  MEMBER
 }

enum OrderStatus {
  PENDING
  DELIVERED
  RECEIVED
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String
  role              Role
  mobile            Int?
  active            Boolean   @default(true)
  lastLogin         DateTime?
  resetToken        String?
  resetTokenExpires DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  vendor            Vendor?   // Relation to Vendor model
  agency            Agency?   // Relation to Agency model

  deliveredOrders   VendorOrder[] @relation("DeliveredBy")
  receivedOrders    VendorOrder[] @relation("ReceivedBy")
  // Optional: If you want to track which user created the order
  // createdOrders     VendorOrder[] @relation("CreatedBy")

  @@map("users")
}

model Vendor {
  id               Int      @id @default(autoincrement())
  name             String
  contactPersonName String?  @map("contact_person_name")
  address1         String
  address2         String?
  city             String
  pincode          Int
  mobile           String
  alternateMobile  String?  @map("alternate_mobile")
  email            String?   @unique
  userId           Int      @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  orders            VendorOrder[] // Relation to VendorOrder

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("vendors")
}

model Agency {
  id               Int      @id @default(autoincrement())
  name             String
  contactPersonName String?  @map("contact_person_name")

  mobile           String
  address1         String
  address2         String?
  city             String
  pincode          Int
  alternateMobile  String?  @map("alternate_mobile")

  email            String?   @unique
  userId           Int      @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderItems        OrderItem[]   // Relation to OrderItem

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("agencies")
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  url       String?
  price     Float       // Changed from String to Float
  unit      String?     // Unit of the product (e.g., kg, pcs, ltr)
  deliveredQuantity Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems  OrderItem[] // Relation to OrderItem

  @@map("products")
}

model VendorOrder {
  id                Int         @id @default(autoincrement())
  poNumber          String?     // From OrderForm
  orderDate         DateTime    // From OrderForm & image (order_date)
  deliveryDate      DateTime?   // From OrderForm (expected delivery)
  
  vendorId          Int         // From OrderForm
  vendor            Vendor      @relation(fields: [vendorId], references: [id])
  
  contactPersonName String?     // From OrderForm (can be denormalized or fetched via vendor)
  notes             String?     // From OrderForm
  
  status            OrderStatus @default(PENDING) // From image

  deliveredById     Int?        // From image (deliveredBy)
  deliveredBy       User?       @relation("DeliveredBy", fields: [deliveredById], references: [id])
  deliveredAt       DateTime?   // From image (deliveredAT)
  
  receivedById      Int?        // From image (recievedBy - typo corrected)
  receivedBy        User?       @relation("ReceivedBy", fields: [receivedById], references: [id])
  receivedAt        DateTime?   // From image (recievedAT - typo corrected)

  // Optional: If you want to track which user created the order
  // createdById       Int?
  // createdBy         User?       @relation("CreatedBy", fields: [createdById], references: [id])

  totalAmount       Float?      // Calculated total from OrderForm

  items             OrderItem[] // Relation to OrderItem

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("vendor_orders") // Maps to the table name from your image
}

model OrderItem {
  id                Int         @id @default(autoincrement())
  
  vendorOrderId     Int
  vendorOrder       VendorOrder @relation(fields: [vendorOrderId], references: [id], onDelete: Cascade)
  
  productId         Int
  product           Product     @relation(fields: [productId], references: [id])
  
  quantity          Int         // From OrderForm & image
  priceAtPurchase   Float       // Store price at time of purchase for accuracy
  
  agencyId          Int         // From OrderForm
  agency            Agency      @relation(fields: [agencyId], references: [id])
  deliveredQuantity Int?        // Actual quantity delivered by vendor
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("vendor_order_items")
}