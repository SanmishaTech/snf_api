generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                 @id @default(autoincrement())
  name                  String
  email                 String              @unique
  password              String
  role                  Role
  mobile                String?             @unique
  active                Boolean             @default(true)
  joiningDate           DateTime?
  lastLogin             DateTime?
  resetToken            String?
  resetTokenExpires     DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  agency                Agency?
  deliveredOrders       VendorOrder[]       @relation("DeliveredBy")
  receivedOrders        VendorOrder[]       @relation("ReceivedBy")
  vendor                Vendor?
  member                Member?
  depot                 Depot?              @relation(fields: [depotId], references: [id])
  depotId               Int?
  transfersCreated      Transfer[]          @relation("Transfer_createdBy")
  // Wallet Transaction related fields
  processedTransactions WalletTransaction[] @relation("AdminProcessedTransactions") // Wallet transactions processed by this user (admin)

  // Purchases relations
  purchasesCreated Purchase[] @relation("PurchaseCreatedBy")
  purchasesUpdated Purchase[] @relation("PurchaseUpdatedBy")

  // Wastage relations
  wastagesCreated Wastage[] @relation("WastageCreatedBy")
  wastagesUpdated Wastage[] @relation("WastageUpdatedBy")

  @@map("users")
}

model Vendor {
  id                Int               @id @default(autoincrement())
  name              String
  contactPersonName String?           @map("contact_person_name")
  address1          String
  address2          String?
  city              String
  pincode           Int
  mobile            String
  alternateMobile   String?           @map("alternate_mobile")
  email             String?           @unique
  isDairySupplier   Boolean           @default(false)
  userId            Int               @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  orders            VendorOrder[]
  purchases         Purchase[]
  wastages          Wastage[]
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  PurchasePayment   PurchasePayment[]

  @@map("vendors")
}

model Agency {
  id                Int            @id @default(autoincrement())
  name              String
  contactPersonName String?        @map("contact_person_name")
  mobile            String
  address1          String
  address2          String?
  city              String
  pincode           Int
  alternateMobile   String?        @map("alternate_mobile")
  email             String?        @unique
  userId            Int            @unique
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]
  subscriptions     Subscription[]
  productOrders           ProductOrder[]
  depotId                 Int?                    @unique
  depot                   Depot?                  @relation(fields: [depotId], references: [id])
  locations               Location[]
  deliveryScheduleEntries DeliveryScheduleEntry[]

  @@index([depotId])
  @@map("agencies")
}

model Product {
  maintainStock           Boolean                 @default(false)
  id                      Int                     @id @default(autoincrement())
  name                    String
  url                     String?
  attachmentUrl           String?
  price                   Float
  rate                    Float
  deliveredQuantity       Int?
  description             String?                 @db.Text // New field for product description
  unit                    String?
  isDairyProduct          Boolean                 @default(false)
  categoryId              Int?
  category                Category?               @relation(fields: [categoryId], references: [id])
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  orderItems              OrderItem[]
  subscriptions           Subscription[]
  deliveryScheduleEntries DeliveryScheduleEntry[]
  variants                ProductVariant[]
  depotProductVariants    DepotProductVariant[]
  variantStocks           VariantStock[]
  purchaseDetails         PurchaseDetail[]
  stockLedgers            StockLedger[]
  wastageDetails          WastageDetail[]

  @@map("products")
}

model ProductVariant {
  id              Int              @id @default(autoincrement())
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       Int
  hsnCode         String?
  mrp             Decimal          @db.Decimal(10, 2)
  sellingPrice    Decimal          @db.Decimal(10, 2)
  name            String
  purchasePrice   Decimal          @db.Decimal(10, 2)
  gstRate         Decimal          @db.Decimal(5, 2)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  variantStocks   VariantStock[]
  purchaseDetails PurchaseDetail[]
  stockLedgers    StockLedger[]

  @@index([productId])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  isDairy   Boolean   @default(false)
  imageUrl  String? // Optional: URL or path to the category image
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model City {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  locations Location[]

  @@map("cities")
}

model Location {
  id                Int               @id @default(autoincrement())
  name              String
  cityId            Int
  city              City              @relation(fields: [cityId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deliveryAddresses DeliveryAddress[]
  agencyId          Int?
  agency            Agency?           @relation(fields: [agencyId], references: [id])

  @@map("locations")
  @@index([agencyId])
}
//at


model VendorOrder {
  id                Int         @id @default(autoincrement())
  poNumber          String?
  orderDate         DateTime
  deliveryDate      DateTime?
  vendorId          Int
  contactPersonName String?
  notes             String?
  status            OrderStatus @default(PENDING)
  deliveredById     Int?
  deliveredAt       DateTime?
  receivedById      Int?
  receivedAt        DateTime?
  totalAmount       Float?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  items             OrderItem[]
  deliveredBy       User?       @relation("DeliveredBy", fields: [deliveredById], references: [id])
  receivedBy        User?       @relation("ReceivedBy", fields: [receivedById], references: [id])
  vendor            Vendor      @relation(fields: [vendorId], references: [id])

  @@index([deliveredById], map: "vendor_orders_deliveredById_fkey")
  @@index([receivedById], map: "vendor_orders_receivedById_fkey")
  @@index([vendorId], map: "vendor_orders_vendorId_fkey")
  @@map("vendor_orders")
}

model OrderItem {
  id                Int         @id @default(autoincrement())
  vendorOrderId     Int
  productId         Int
  quantity          Int
  priceAtPurchase   Float
  agencyId          Int
  deliveredQuantity Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  receivedQuantity  Int?
  agency            Agency      @relation(fields: [agencyId], references: [id])
  product           Product     @relation(fields: [productId], references: [id])
  vendorOrder       VendorOrder @relation(fields: [vendorOrderId], references: [id], onDelete: Cascade)

  @@index([agencyId], map: "vendor_order_items_agencyId_fkey")
  @@index([productId], map: "vendor_order_items_productId_fkey")
  @@index([vendorOrderId], map: "vendor_order_items_vendorOrderId_fkey")
  @@map("vendor_order_items")
}

model Member {
  id                      Int                     @id @default(autoincrement())
  name                    String
  userId                  Int                     @unique
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  addresses               DeliveryAddress[]
  subscriptions           Subscription[]
  deliveryScheduleEntries DeliveryScheduleEntry[]
  walletBalance           Float                   @default(0)
  walletTransactions      WalletTransaction[]     @relation("MemberTransactions")
  productOrders           ProductOrder[]

  @@map("members")
}

model Banner {
  id          Int      @id @default(autoincrement())
  caption     String?
  description String?
  imagePath   String
  listOrder   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Depot {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  address              String
  contactPerson        String?
  contactNumber        String?
  isOnline             Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  areas                AreaMaster[] // Relation to AreaMaster
  members              User[]
  variantStocks        VariantStock[]
  purchases            Purchase[]
  stockLedgers         StockLedger[]
  wastages             Wastage[]
  depotProductVariants DepotProductVariant[]
  transfersFrom        Transfer[]            @relation("TransferFromDepot")
  transfersTo          Transfer[]            @relation("TransferToDepot")
  agency               Agency?

  @@map("depots")
}

enum Role {
  ADMIN
  AGENCY
  MEMBER
  VENDOR
  DepotAdmin
}

enum OrderStatus {
  PENDING
  DELIVERED
  RECEIVED
}

model DeliveryAddress {
  id                      Int                     @id @default(autoincrement())
  memberId                Int
  recipientName           String
  mobile                  String
  plotBuilding            String
  streetArea              String
  landmark                String?
  pincode                 String
  city                    String
  state                   String
  label                   String?
  isDefault               Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  member                  Member                  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  subscriptions           Subscription[]
  deliveryScheduleEntries DeliveryScheduleEntry[]

  locationId  Int?
  location    Location? @relation(fields: [locationId], references: [id])

  @@index([memberId], map: "delivery_addresses_memberId_fkey")
  @@index([locationId])
  @@map("delivery_addresses")
}

// Enums for Subscriptions
enum DeliverySchedule {
  DAILY
  DAY1_DAY2
  WEEKDAYS // maps to SELECT_DAYS in controller logic if weekdays are provided
  ALTERNATE_DAYS
}

enum DeliveryType {
  HandDelivery
  Courier
}

model AreaMaster {
  id           Int          @id @default(autoincrement())
  name         String
  pincodes     String       @db.LongText // Comma-separated string of pincodes. Explicitly LongText for MySQL.
  deliveryType DeliveryType
  depotId      Int? // Foreign key to Depot
  depot        Depot?       @relation(fields: [depotId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([depotId])
  @@map("area_masters")
}

enum PaymentMode {
  ONLINE
  CASH
  UPI
  BANK
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum DeliveryStatus {
  PENDING // Default for future deliveries, or for today if not yet actioned
  DELIVERED // Successfully delivered
  NOT_DELIVERED // Attempted delivery but failed (e.g., customer not home, address issue)
  CANCELLED // Delivery cancelled (e.g., due to product unavailability, or part of subscription cancellation)
  SKIPPED // Skipped by the member
}

model DeliveryScheduleEntry {
  id                Int             @id @default(autoincrement())
  subscription      Subscription    @relation(fields: [subscriptionId], references: [id], onDelete: Cascade) // Added onDelete
  subscriptionId    Int // Changed to Int
  member            Member          @relation(fields: [memberId], references: [id], onDelete: Cascade) // Added onDelete
  memberId          Int // Changed to Int
  deliveryAddress   DeliveryAddress? @relation(fields: [deliveryAddressId], references: [id], onDelete: Cascade) // Added onDelete
  deliveryAddressId Int? // Changed to Int
  product           Product         @relation(fields: [productId], references: [id], onDelete: Restrict) // Added onDelete (Restrict as product might be in other schedules)
  productId         Int
  deliveryDate      DateTime        @db.Date
  quantity          Int             @default(1) // Quantity for this specific delivery, default to 1
  status            DeliveryStatus  @default(PENDING)
  agentId           Int?
  agent             Agency?         @relation(fields: [agentId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([subscriptionId])
  @@index([memberId])
  @@index([deliveryAddressId])
  @@index([productId])
  @@index([deliveryDate])
  @@index([agentId])
  @@map("delivery_schedule_entries")
}

// Model for Subscriptions
model Subscription {
  id                Int              @id @default(autoincrement())
  memberId          Int
  deliveryAddressId Int?
  productId         Int
  depotProductVariantId Int?
  startDate         DateTime         @default(now()) // Date when the subscription effectively starts
  period            Int
  expiryDate        DateTime
  deliverySchedule  DeliverySchedule
  weekdays          String? // To store JSON array of weekdays, e.g., ["MONDAY", "TUESDAY"] if schedule is WEEKDAYS
  qty               Int
  altQty            Int? // Optional: for alternate day deliveries if different quantity
  rate              Float // Per unit price at the time of subscription
  totalQty          Int // Calculated by application logic
  amount            Float // Calculated by application logic: rate * totalQty

  walletamt   Float @default(0)
  payableamt  Float @default(0)
  receivedamt Float @default(0)

  paymentMode        PaymentMode?
  paymentReferenceNo String?
  paymentDate        DateTime?
  paymentStatus      PaymentStatus @default(PENDING)
  agencyId           Int? // Optional: if subscription is linked to a specific agency for fulfillment
  createdAt          DateTime      @default(now()) // Date when the record was created
  updatedAt          DateTime      @updatedAt

  member                  Member                  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  deliveryAddress         DeliveryAddress?        @relation(fields: [deliveryAddressId], references: [id], onDelete: Cascade)
  product                 Product                 @relation(fields: [productId], references: [id], onDelete: Restrict)
  depotProductVariant     DepotProductVariant?    @relation(fields: [depotProductVariantId], references: [id], onDelete: Restrict)
  agency                  Agency?                 @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  deliveryScheduleEntries DeliveryScheduleEntry[]

  @@index([memberId])
  @@index([deliveryAddressId])
  @@index([productId])
  @@index([agencyId])

  productOrder   ProductOrder? @relation(fields: [productOrderId], references: [id])
  productOrderId Int?

  @@map("subscriptions")
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  PAID
  FAILED // Added FAILED status
  // Consider adding FAILED, CANCELLED, REFUNDED if needed in the future
}

model WalletTransaction {
  id                 Int               @id @default(autoincrement())
  memberId           Int
  amount             Float
  status             TransactionStatus @default(PENDING)
  type               TransactionType
  paymentMethod      String?
  referenceNumber    String?
  notes              String?           @db.Text
  processedByAdminId Int?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  member           Member @relation("MemberTransactions", fields: [memberId], references: [id], onDelete: Cascade)
  processedByAdmin User?  @relation("AdminProcessedTransactions", fields: [processedByAdminId], references: [id])

  @@index([memberId])
  @@index([processedByAdminId])
  @@map("wallet_transactions")
}

/**
 * model Wallet {
 * id        Int      @id @default(autoincrement())
 * memberId  Int      @unique // Foreign key to Member
 * balance   Float    @default(0.0)
 * currency  String   @default("INR") // Default currency, adjust as needed
 * createdAt DateTime @default(now())
 * updatedAt DateTime @updatedAt
 * member       Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
 * transactions Transaction[] // A wallet can have many transactions
 * @@map("wallets")
 * }
 * model Transaction {
 * id       Int               @id @default(autoincrement())
 * userId   Int? // ID of the User (member) initiating the transaction. Made optional.
 * amount   Float
 * status   TransactionStatus @default(PENDING)
 * type     TransactionType // e.g., CREDIT for top-up, DEBIT for withdrawal
 * walletId Int? // Foreign key to Wallet, set upon approval. Made optional.
 * // Optional details from original model, can be kept
 * paymentMethod   String? // e.g., "Cash", "Bank Transfer", "UPI"
 * referenceNumber String? // e.g., Cheque number, UPI transaction ID
 * notes           String? @db.Text
 * processedByAdminId Int? // Foreign key to User (admin who approved/processed the transaction). Renamed from adminId & made optional.
 * createdAt          DateTime @default(now())
 * updatedAt          DateTime @updatedAt
 * user             User?   @relation("UserTransactions", fields: [userId], references: [id]) // Relation to User is now optional
 * wallet           Wallet? @relation(fields: [walletId], references: [id], onDelete: Cascade) // Relation is now optional
 * processedByAdmin User?   @relation("AdminProcessedTransactions", fields: [processedByAdminId], references: [id]) // Renamed relation
 * @@index([userId]) // Index on optional field
 * @@index([walletId]) // Existing index, field is now optional
 * @@index([processedByAdminId]) // Index for renamed field
 * @@map("transactions")
 * }
 */

model VariantStock {
  id         Int    @id @default(autoincrement())
  productId  Int
  variantId  Int
  depotId    Int
  closingQty String

  product Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant DepotProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  depot   Depot               @relation(fields: [depotId], references: [id], onDelete: Cascade)

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId Int?

  @@index([productId])
  @@index([variantId])
  @@index([depotId])
}

model Purchase {
  id           Int       @id @default(autoincrement())
  purchaseNo   String    @unique // Auto–generated reference e.g., 2526-00001
  purchaseDate DateTime  @db.Date
  invoiceNo    String?
  invoiceDate  DateTime? @db.Date
  vendorId     Int
  depotId      Int?
  createdById  Int?
  updatedById  Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  paidAmt      Float     @default(0)

  // Relations
  vendor    Vendor @relation(fields: [vendorId], references: [id])
  depot     Depot? @relation(fields: [depotId], references: [id])
  createdBy User?  @relation("PurchaseCreatedBy", fields: [createdById], references: [id])
  updatedBy User?  @relation("PurchaseUpdatedBy", fields: [updatedById], references: [id])

  details               PurchaseDetail[]
  payments              PurchasePayment[]
  PurchasePaymentDetail PurchasePaymentDetail[]

  @@index([vendorId])
  @@index([depotId])
}

model PurchaseDetail {
  id           Int      @id @default(autoincrement())
  purchaseId   Int
  productId    Int
  variantId    Int
  quantity     Int
  purchaseRate Decimal  @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  purchase         Purchase            @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product          Product             @relation(fields: [productId], references: [id])
  variant          DepotProductVariant @relation(fields: [variantId], references: [id])
  ProductVariant   ProductVariant?     @relation(fields: [productVariantId], references: [id])
  productVariantId Int?

  @@index([purchaseId])
  @@index([productId])
  @@index([variantId])
}

model PurchasePayment {
  id          Int      @id @default(autoincrement())
  paymentno   String?  @unique
  paymentDate DateTime @db.Date
  vendorId    Int
  mode        String
  referenceNo String?
  notes       String?  @db.Text
  totalAmount Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  vendor     Vendor                  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  details    PurchasePaymentDetail[]
  Purchase   Purchase?               @relation(fields: [purchaseId], references: [id])
  purchaseId Int?

  @@index([vendorId])
  @@map("purchase_payments")
}

model PurchasePaymentDetail {
  id                Int      @id @default(autoincrement())
  purchasePaymentId Int
  purchaseId        Int
  amount            Decimal  @db.Decimal(10, 2)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  purchasePayment PurchasePayment @relation(fields: [purchasePaymentId], references: [id], onDelete: Cascade)
  purchase        Purchase        @relation(fields: [purchaseId], references: [id])

  @@index([purchasePaymentId])
  @@index([purchaseId])
  @@map("purchase_payment_details")
}

model Wastage {
  id          Int       @id @default(autoincrement())
  wastageNo   String    @unique
  wastageDate DateTime
  invoiceNo   String?
  invoiceDate DateTime? @db.Date
  vendorId    Int?
  depotId     Int?
  depot       Depot?    @relation(fields: [depotId], references: [id])
  vendor      Vendor?   @relation(fields: [vendorId], references: [id])
  createdById Int?
  updatedById Int?
  createdBy   User?     @relation("WastageCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?     @relation("WastageUpdatedBy", fields: [updatedById], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  details WastageDetail[]

  @@index([vendorId])
  @@index([depotId])
  @@map("wastages")
}

model WastageDetail {
  id        Int     @id @default(autoincrement())
  wastageId Int
  wastage   Wastage @relation(fields: [wastageId], references: [id])

  productId Int
  product   Product             @relation(fields: [productId], references: [id])
  variantId Int
  variant   DepotProductVariant @relation(fields: [variantId], references: [id])

  quantity Int

  @@index([variantId])
  @@map("wastage_details")
}

// Ledger to record every stock movement per variant per depot
model DepotProductVariant {
  id            Int     @id @default(autoincrement())
  depot         Depot   @relation(fields: [depotId], references: [id], onDelete: Cascade)
  depotId       Int
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     Int
  name          String
  hsnCode       String?
  sellingPrice  Decimal @db.Decimal(10, 2)
  purchasePrice Decimal @db.Decimal(10, 2)
  price3Day     Decimal? @db.Decimal(10, 2)
  price7Day     Decimal? @db.Decimal(10, 2)
  price15Day    Decimal? @db.Decimal(10, 2)
  price1Month   Decimal? @db.Decimal(10, 2)
  minimumQty    Int     @default(0)
  closingQty    Int     @default(0)

  wastageDetails WastageDetail[]
  notInStock     Boolean          @default(false)
  isHidden       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  buyOncePrice   Decimal?         @db.Decimal(10, 2)
  VariantStock   VariantStock[]
  StockLedger    StockLedger[]
  PurchaseDetail PurchaseDetail[]
  transfersFrom  TransferDetail[] @relation("TransferFromVariant")
  transfersTo    TransferDetail[] @relation("TransferToVariant")
  subscriptions  Subscription[]

  @@index([productId])
  @@index([depotId])
  @@map("depot_product_variants")
}

model StockLedger {
  id              Int      @id @default(autoincrement())
  productId       Int
  variantId       Int
  depotId         Int
  transactionDate DateTime @db.Date
  receivedQty     Int      @default(0)
  issuedQty       Int      @default(0)
  module          String // Source module e.g. "purchase", "sale"
  foreignKey      Int // Reference record id from the source module

  // Relations
  product Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant DepotProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  depot   Depot               @relation(fields: [depotId], references: [id], onDelete: Cascade)

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId Int?

  @@index([productId])
  @@index([variantId])
  @@index([depotId])
}

// ---------------- Transfer tables ----------------
model Transfer {
  id           Int      @id @default(autoincrement())
  transferNo   String   @unique
  transferDate DateTime @db.Date
  fromDepotId  Int
  toDepotId    Int
  notes        String?  @db.Text
  createdById  Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  fromDepot Depot            @relation("TransferFromDepot", fields: [fromDepotId], references: [id], onDelete: Cascade)
  toDepot   Depot            @relation("TransferToDepot", fields: [toDepotId], references: [id], onDelete: Cascade)
  createdBy User?            @relation("Transfer_createdBy", fields: [createdById], references: [id])
  details   TransferDetail[]

  @@index([fromDepotId])
  @@index([toDepotId])
  @@index([createdById])
  @@map("transfers")
}

model TransferDetail {
  id                 Int      @id @default(autoincrement())
  transferId         Int
  fromDepotVariantId Int
  toDepotVariantId   Int
  quantity           Int
  createdAt          DateTime @default(now())

  // Relations
  transfer    Transfer            @relation(fields: [transferId], references: [id], onDelete: Cascade)
  fromVariant DepotProductVariant @relation("TransferFromVariant", fields: [fromDepotVariantId], references: [id])
  toVariant   DepotProductVariant @relation("TransferToVariant", fields: [toDepotVariantId], references: [id])

  @@index([transferId])
  @@index([fromDepotVariantId])
  @@index([toDepotVariantId])
  @@map("transfer_details")
}

model ProductOrder {
  id                 Int             @id @default(autoincrement())
  orderNo            String          @unique
  memberId           Int
  member             Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  subscriptions      Subscription[]
  totalQty           Int
  totalAmount        Float
  walletamt          Float           @default(0)
  payableamt         Float           @default(0)
  receivedamt        Float           @default(0)
  paymentMode        PaymentMode?
  paymentReferenceNo String?
  paymentDate        DateTime?
  paymentStatus      PaymentStatus   @default(PENDING)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  agencyId           Int?
  agency             Agency?         @relation(fields: [agencyId], references: [id])

  @@index([memberId])
  @@index([agencyId])
  @@map("product_orders")
}
