generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  name              String
  email             String        @unique
  password          String
  role              Role
  mobile            Int?
  active            Boolean       @default(true)
  lastLogin         DateTime?
  resetToken        String?
  resetTokenExpires DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  agency            Agency?
  deliveredOrders   VendorOrder[] @relation("DeliveredBy")
  receivedOrders    VendorOrder[] @relation("ReceivedBy")
  vendor            Vendor?

  @@map("users")
}

model Vendor {
  id                Int           @id @default(autoincrement())
  name              String
  contactPersonName String?       @map("contact_person_name")
  address1          String
  address2          String?
  city              String
  pincode           Int
  mobile            String
  alternateMobile   String?       @map("alternate_mobile")
  email             String?       @unique
  userId            Int           @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  orders            VendorOrder[]
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vendors")
}

model Agency {
  id                Int         @id @default(autoincrement())
  name              String
  contactPersonName String?     @map("contact_person_name")
  mobile            String
  address1          String
  address2          String?
  city              String
  pincode           Int
  alternateMobile   String?     @map("alternate_mobile")
  email             String?     @unique
  userId            Int         @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]

  @@map("agencies")
}

model Product {
  id                Int         @id @default(autoincrement())
  name              String
  url               String?
  price             Float
  deliveredQuantity Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  unit              String?
  orderItems        OrderItem[]

  @@map("products")
}

model VendorOrder {
  id                Int         @id @default(autoincrement())
  poNumber          String?
  orderDate         DateTime
  deliveryDate      DateTime?
  vendorId          Int
  contactPersonName String?
  notes             String?
  status            OrderStatus @default(PENDING)
  deliveredById     Int?
  deliveredAt       DateTime?
  receivedById      Int?
  receivedAt        DateTime?
  totalAmount       Float?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  items             OrderItem[]
  deliveredBy       User?       @relation("DeliveredBy", fields: [deliveredById], references: [id])
  receivedBy        User?       @relation("ReceivedBy", fields: [receivedById], references: [id])
  vendor            Vendor      @relation(fields: [vendorId], references: [id])

  @@index([deliveredById], map: "vendor_orders_deliveredById_fkey")
  @@index([receivedById], map: "vendor_orders_receivedById_fkey")
  @@index([vendorId], map: "vendor_orders_vendorId_fkey")
  @@map("vendor_orders")
}

model OrderItem {
  id                Int         @id @default(autoincrement())
  vendorOrderId     Int
  productId         Int
  quantity          Int
  priceAtPurchase   Float
  agencyId          Int
  deliveredQuantity Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  receivedQuantity  Int?
  agency            Agency      @relation(fields: [agencyId], references: [id])
  product           Product     @relation(fields: [productId], references: [id])
  vendorOrder       VendorOrder @relation(fields: [vendorOrderId], references: [id], onDelete: Cascade)

  @@index([agencyId], map: "vendor_order_items_agencyId_fkey")
  @@index([productId], map: "vendor_order_items_productId_fkey")
  @@index([vendorOrderId], map: "vendor_order_items_vendorOrderId_fkey")
  @@map("vendor_order_items")
}

enum Role {
  VENDOR
  AGENCY
  ADMIN
  MEMBER
}

enum OrderStatus {
  PENDING
  DELIVERED
  RECEIVED
}
