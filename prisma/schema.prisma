generator client {
  provider = "prisma-client-js"
}
//changes

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                 @id @default(autoincrement())
  name                  String
  email                 String              @unique
  password              String
  role                  Role
  mobile                String?             @unique
  active                Boolean             @default(true)
  lastLogin             DateTime?
  resetToken            String?
  resetTokenExpires     DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  depotId               Int?
  joiningDate           DateTime?
  purchasesCreated      Purchase[]          @relation("PurchaseCreatedBy")
  purchasesUpdated      Purchase[]          @relation("PurchaseUpdatedBy")
  agency                Agency?
  member                Member?
  supervisor            Supervisor?
  transfersCreated      Transfer[]          @relation("Transfer_createdBy")
  depot                 Depot?              @relation(fields: [depotId], references: [id])
  deliveredOrders       VendorOrder[]       @relation("DeliveredBy")
  receivedOrders        VendorOrder[]       @relation("ReceivedBy")
  wastageRegisteredOrders VendorOrder[]     @relation("WastageRegisteredBy")
  vendor                Vendor?
  processedTransactions WalletTransaction[] @relation("AdminProcessedTransactions")
  wastagesCreated       Wastage[]           @relation("WastageCreatedBy")
  wastagesUpdated       Wastage[]           @relation("WastageUpdatedBy")

  @@index([depotId], map: "users_depotId_fkey")
  @@map("users")
}

model Vendor {
  id                Int               @id @default(autoincrement())
  name              String
  contactPersonName String?           @map("contact_person_name")
  address1          String
  address2          String?
  city              String
  pincode           Int
  mobile            String
  alternateMobile   String?           @map("alternate_mobile")
  email             String?           @unique
  userId            Int               @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isDairySupplier   Boolean           @default(false)
  purchases         Purchase[]
  PurchasePayment   PurchasePayment[]
  orders            VendorOrder[]
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  wastages          Wastage[]

  @@map("vendors")
}

model Agency {
  id                      Int                     @id @default(autoincrement())
  name                    String
  contactPersonName       String?                 @map("contact_person_name")
  mobile                  String
  address1                String
  address2                String?
  city                    String
  pincode                 Int
  alternateMobile         String?                 @map("alternate_mobile")
  email                   String?                 @unique
  userId                  Int                     @unique
  depotId                 Int?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  depot                   Depot?                  @relation(fields: [depotId], references: [id])
  deliveryScheduleEntries DeliveryScheduleEntry[]
  locations               Location[]
  productOrders           ProductOrder[]
  subscriptions           Subscription[]
  supervisors             Supervisor[]
  orderItems              OrderItem[]

  @@index([depotId])
  @@map("agencies")
}

model Supervisor {
  id                Int      @id @default(autoincrement())
  name              String
  contactPersonName String?  @map("contact_person_name")
  mobile            String
  address1          String
  address2          String?
  city              String
  pincode           Int
  alternateMobile   String?  @map("alternate_mobile")
  email             String?  @unique
  userId            Int      @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  depotId           Int?
  agencyId          Int?
  agency            Agency?  @relation(fields: [agencyId], references: [id])
  depot             Depot?   @relation(fields: [depotId], references: [id])
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([depotId])
  @@index([agencyId])
  @@map("supervisors")
}

model Product {
  id                      Int                     @id @default(autoincrement())
  name                    String
  url                     String?
  attachmentUrl           String?
  deliveredQuantity       Int?
  description             String?                 @db.Text
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  categoryId              Int?
  isDairyProduct          Boolean                 @default(false)
  maintainStock           Boolean                 @default(false)
  tags                    String?
  variants                ProductVariant[]
  purchaseDetails         PurchaseDetail[]
  stockLedgers            StockLedger[]
  variantStocks           VariantStock[]
  deliveryScheduleEntries DeliveryScheduleEntry[]
  depotProductVariants    DepotProductVariant[]
  category                Category?               @relation(fields: [categoryId], references: [id])
  snfOrderItems           SNFOrderItem[]          @relation("ProductSNFOrderItems")
  subscriptions           Subscription[]
  orderItems              OrderItem[]
  wastageDetails          WastageDetail[]

  @@index([categoryId], map: "products_categoryId_fkey")
  @@map("products")
}

model ProductVariant {
  id              Int              @id @default(autoincrement())
  productId       Int
  hsnCode         String?
  mrp             Decimal          @db.Decimal(10, 2)
  sellingPrice    Decimal          @db.Decimal(10, 2)
  name            String
  purchasePrice   Decimal          @db.Decimal(10, 2)
  gstRate         Decimal          @db.Decimal(5, 2)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchaseDetails PurchaseDetail[]
  stockLedgers    StockLedger[]
  variantStocks   VariantStock[]

  @@index([productId])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  isDairy   Boolean   @default(false)
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model City {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  areaMasters AreaMaster[]
  locations   Location[]

  @@map("cities")
}

model Location {
  id                Int               @id @default(autoincrement())
  name              String
  cityId            Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  agencyId          Int?
  deliveryAddresses DeliveryAddress[]
  agency            Agency?           @relation(fields: [agencyId], references: [id])
  city              City              @relation(fields: [cityId], references: [id])

  @@index([agencyId])
  @@index([cityId], map: "locations_cityId_fkey")
  @@map("locations")
}

model VendorOrder {
  id                    Int         @id @default(autoincrement())
  poNumber              String?
  orderDate             DateTime
  deliveryDate          DateTime?
  vendorId              Int
  contactPersonName     String?
  notes                 String?
  status                OrderStatus @default(PENDING)
  deliveredById         Int?
  deliveredAt           DateTime?
  receivedById          Int?
  receivedAt            DateTime?
  totalAmount           Float?
  farmerWastage         Int?        @default(0)
  farmerNotReceived     Int?        @default(0)
  agencyWastage         Int?        @default(0)
  agencyNotReceived     Int?        @default(0)
  wastageRegisteredById Int?
  wastageRegisteredAt   DateTime?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  items                 OrderItem[]
  deliveredBy           User?       @relation("DeliveredBy", fields: [deliveredById], references: [id])
  receivedBy            User?       @relation("ReceivedBy", fields: [receivedById], references: [id])
  wastageRegisteredBy   User?       @relation("WastageRegisteredBy", fields: [wastageRegisteredById], references: [id])
  vendor                Vendor      @relation(fields: [vendorId], references: [id])

  @@index([deliveredById], map: "vendor_orders_deliveredById_fkey")
  @@index([receivedById], map: "vendor_orders_receivedById_fkey")
  @@index([wastageRegisteredById], map: "vendor_orders_wastageRegisteredById_fkey")
  @@index([vendorId], map: "vendor_orders_vendorId_fkey")
  @@map("vendor_orders")
}

model OrderItem {
  id                 Int                  @id @default(autoincrement())
  vendorOrderId      Int
  productId          Int
  quantity           Int
  priceAtPurchase    Float
  agencyId           Int
  deliveredQuantity  Int?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  receivedQuantity   Int?
  depotId            Int?
  depotVariantId     Int?
  supervisorQuantity Int?
  agency             Agency               @relation(fields: [agencyId], references: [id])
  depot              Depot?               @relation(fields: [depotId], references: [id])
  depotVariant       DepotProductVariant? @relation(fields: [depotVariantId], references: [id])
  product            Product              @relation(fields: [productId], references: [id])
  vendorOrder        VendorOrder          @relation(fields: [vendorOrderId], references: [id], onDelete: Cascade)

  @@index([agencyId], map: "vendor_order_items_agencyId_fkey")
  @@index([productId], map: "vendor_order_items_product_idx")
  @@index([vendorOrderId], map: "vendor_order_items_vendorOrderId_fkey")
  @@index([depotId], map: "vendor_order_items_depotId_fkey")
  @@index([depotVariantId], map: "vendor_order_items_depotVariantId_fkey")
  @@map("vendor_order_items")
}

model Member {
  id                      Int                     @id @default(autoincrement())
  name                    String
  userId                  Int                     @unique
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  walletBalance           Float                   @default(0)
  addresses               DeliveryAddress[]
  deliveryScheduleEntries DeliveryScheduleEntry[]
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productOrders           ProductOrder[]
  snfOrders               SNFOrder[]              @relation("MemberSNFOrders")
  subscriptions           Subscription[]
  walletTransactions      WalletTransaction[]     @relation("MemberTransactions")

  @@map("members")
}

model Banner {
  id          Int      @id @default(autoincrement())
  caption     String?
  description String?
  imagePath   String
  listOrder   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Depot {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @unique
  address                 String
  contactPerson           String?
  contactNumber           String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  isOnline                Boolean                 @default(false)
  city                    String
  purchases               Purchase[]
  stockLedgers            StockLedger[]
  variantStocks           VariantStock[]
  areas                   AreaMaster[]
  deliveryScheduleEntries DeliveryScheduleEntry[]
  depotProductVariants    DepotProductVariant[]
  snfOrders               SNFOrder[]
  supervisors             Supervisor[]
  transfersFrom           Transfer[]              @relation("TransferFromDepot")
  transfersTo             Transfer[]              @relation("TransferToDepot")
  members                 User[]
  orderItems              OrderItem[]
  wastages                Wastage[]
  agencies                Agency[]

  @@map("depots")
}

model DeliveryAddress {
  id                      Int                     @id @default(autoincrement())
  memberId                Int
  recipientName           String
  mobile                  String
  plotBuilding            String
  streetArea              String
  landmark                String?
  pincode                 String
  city                    String
  state                   String
  label                   String?
  isDefault               Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  locationId              Int?
  location                Location?               @relation(fields: [locationId], references: [id])
  member                  Member                  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  deliveryScheduleEntries DeliveryScheduleEntry[]
  subscriptions           Subscription[]

  @@index([memberId], map: "delivery_addresses_memberId_fkey")
  @@index([locationId])
  @@map("delivery_addresses")
}

model AreaMaster {
  id             Int          @id @default(autoincrement())
  name           String
  pincodes       String       @db.LongText
  deliveryType   DeliveryType
  depotId        Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isDairyProduct Boolean      @default(false)
  cityId         Int?
  city           City?        @relation(fields: [cityId], references: [id])
  depot          Depot?       @relation(fields: [depotId], references: [id])

  @@index([depotId])
  @@index([cityId])
  @@map("area_masters")
}

model DeliveryScheduleEntry {
  id                    Int                  @id @default(autoincrement())
  subscriptionId        Int
  memberId              Int
  deliveryAddressId     Int?
  productId             Int
  deliveryDate          DateTime             @db.Date
  quantity              Int                  @default(1)
  status                DeliveryStatus       @default(PENDING)
  agentId               Int?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  depotId               Int?
  depotProductVariantId Int?
  adminNotes            String?              @db.Text
  walletTransactionId   Int?                 @unique
  agent                 Agency?              @relation(fields: [agentId], references: [id])
  deliveryAddress       DeliveryAddress?     @relation(fields: [deliveryAddressId], references: [id], onDelete: Cascade)
  Depot                 Depot?               @relation(fields: [depotId], references: [id])
  DepotProductVariant   DepotProductVariant? @relation(fields: [depotProductVariantId], references: [id])
  member                Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  product               Product              @relation(fields: [productId], references: [id])
  subscription          Subscription         @relation(fields: [subscriptionId], references: [id], onDelete: Restrict)
  walletTransaction     WalletTransaction?   @relation(fields: [walletTransactionId], references: [id])

  @@index([subscriptionId])
  @@index([memberId])
  @@index([deliveryAddressId])
  @@index([productId])
  @@index([deliveryDate])
  @@index([agentId])
  @@index([walletTransactionId])
  @@index([depotId], map: "delivery_schedule_entries_depotId_fkey")
  @@index([depotProductVariantId], map: "delivery_schedule_entries_depotProductVariantId_fkey")
  @@map("delivery_schedule_entries")
}

model Subscription {
  id                      Int                     @id @default(autoincrement())
  memberId                Int
  deliveryAddressId       Int?
  productId               Int
  startDate               DateTime                @db.Date
  period                  Int
  expiryDate              DateTime                @db.Date
  deliverySchedule        DeliverySchedule
  weekdays                String?
  qty                     Int
  altQty                  Int?
  rate                    Float
  totalQty                Int
  amount                  Float
  paymentMode             PaymentMode?
  paymentReferenceNo      String?
  paymentDate             DateTime?
  paymentStatus           PaymentStatus           @default(PENDING)
  agencyId                Int?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  payableamt              Float                   @default(0)
  receivedamt             Float                   @default(0)
  walletamt               Float                   @default(0)
  depotProductVariantId   Int?
  productOrderId          Int?
  deliveryInstructions    String?                 @db.Text
  deliveryScheduleEntries DeliveryScheduleEntry[]
  agency                  Agency?                 @relation(fields: [agencyId], references: [id])
  deliveryAddress         DeliveryAddress?        @relation(fields: [deliveryAddressId], references: [id], onDelete: Cascade)
  depotProductVariant     DepotProductVariant?    @relation(fields: [depotProductVariantId], references: [id], onDelete: Restrict)
  member                  Member                  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  product                 Product                 @relation(fields: [productId], references: [id])
  productOrder            ProductOrder?           @relation(fields: [productOrderId], references: [id])

  @@index([memberId])
  @@index([deliveryAddressId])
  @@index([productId])
  @@index([agencyId])
  @@index([depotProductVariantId], map: "subscriptions_depotProductVariantId_fkey")
  @@index([productOrderId], map: "subscriptions_productOrderId_fkey")
  @@map("subscriptions")
}

model WalletTransaction {
  id                    Int                    @id @default(autoincrement())
  memberId              Int
  amount                Float
  status                TransactionStatus      @default(PENDING)
  type                  TransactionType
  paymentMethod         String?
  referenceNumber       String?
  notes                 String?                @db.Text
  processedByAdminId    Int?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deliveryScheduleEntry DeliveryScheduleEntry?
  member                Member                 @relation("MemberTransactions", fields: [memberId], references: [id], onDelete: Cascade)
  processedByAdmin      User?                  @relation("AdminProcessedTransactions", fields: [processedByAdminId], references: [id])

  @@index([memberId])
  @@index([processedByAdminId])
  @@map("wallet_transactions")
}

model VariantStock {
  id               Int                 @id @default(autoincrement())
  productId        Int
  variantId        Int
  depotId          Int
  closingQty       String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  productVariantId Int?
  depot            Depot               @relation(fields: [depotId], references: [id], onDelete: Cascade)
  product          Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  ProductVariant   ProductVariant?     @relation(fields: [productVariantId], references: [id])
  variant          DepotProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([variantId])
  @@index([depotId])
  @@index([productVariantId], map: "VariantStock_productVariantId_fkey")
}

model Purchase {
  id                    Int                     @id @default(autoincrement())
  purchaseNo            String                  @unique
  purchaseDate          DateTime                @db.Date
  invoiceNo             String?
  invoiceDate           DateTime?               @db.Date
  vendorId              Int
  depotId               Int?
  createdById           Int?
  updatedById           Int?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  paidAmt               Float                   @default(0)
  createdBy             User?                   @relation("PurchaseCreatedBy", fields: [createdById], references: [id])
  depot                 Depot?                  @relation(fields: [depotId], references: [id])
  updatedBy             User?                   @relation("PurchaseUpdatedBy", fields: [updatedById], references: [id])
  vendor                Vendor                  @relation(fields: [vendorId], references: [id])
  details               PurchaseDetail[]
  PurchasePaymentDetail PurchasePaymentDetail[]
  payments              PurchasePayment[]

  @@index([vendorId])
  @@index([depotId])
  @@index([createdById], map: "Purchase_createdById_fkey")
  @@index([updatedById], map: "Purchase_updatedById_fkey")
}
//changes

model PurchaseDetail {
  id               Int                 @id @default(autoincrement())
  purchaseId       Int
  productId        Int
  variantId        Int
  quantity         Int
  purchaseRate     Decimal             @db.Decimal(10, 2)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  productVariantId Int?
  product          Product             @relation(fields: [productId], references: [id])
  ProductVariant   ProductVariant?     @relation(fields: [productVariantId], references: [id])
  purchase         Purchase            @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  variant          DepotProductVariant @relation(fields: [variantId], references: [id])

  @@index([purchaseId])
  @@index([productId])
  @@index([variantId])
  @@index([productVariantId], map: "PurchaseDetail_productVariantId_fkey")
}

model PurchasePayment {
  id          Int                     @id @default(autoincrement())
  paymentno   String?                 @unique
  paymentDate DateTime                @db.Date
  vendorId    Int
  mode        String
  referenceNo String?
  notes       String?                 @db.Text
  totalAmount Decimal                 @db.Decimal(10, 2)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  purchaseId  Int?
  details     PurchasePaymentDetail[]
  Purchase    Purchase?               @relation(fields: [purchaseId], references: [id])
  vendor      Vendor                  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([purchaseId], map: "purchase_payments_purchaseId_fkey")
  @@map("purchase_payments")
}

model PurchasePaymentDetail {
  id                Int             @id @default(autoincrement())
  purchasePaymentId Int
  purchaseId        Int
  amount            Decimal         @db.Decimal(10, 2)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  purchase          Purchase        @relation(fields: [purchaseId], references: [id])
  purchasePayment   PurchasePayment @relation(fields: [purchasePaymentId], references: [id], onDelete: Cascade)

  @@index([purchasePaymentId])
  @@index([purchaseId])
  @@map("purchase_payment_details")
}

model Wastage {
  id          Int             @id @default(autoincrement())
  wastageNo   String          @unique
  wastageDate DateTime
  invoiceNo   String?
  invoiceDate DateTime?       @db.Date
  vendorId    Int?
  depotId     Int?
  createdById Int?
  updatedById Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  details     WastageDetail[]
  createdBy   User?           @relation("WastageCreatedBy", fields: [createdById], references: [id])
  depot       Depot?          @relation(fields: [depotId], references: [id])
  updatedBy   User?           @relation("WastageUpdatedBy", fields: [updatedById], references: [id])
  vendor      Vendor?         @relation(fields: [vendorId], references: [id])

  @@index([vendorId])
  @@index([depotId])
  @@index([createdById], map: "wastages_createdById_fkey")
  @@index([updatedById], map: "wastages_updatedById_fkey")
  @@map("wastages")
}

model WastageDetail {
  id        Int                 @id @default(autoincrement())
  wastageId Int
  productId Int
  variantId Int
  quantity  Int
  product   Product             @relation(fields: [productId], references: [id])
  variant   DepotProductVariant @relation(fields: [variantId], references: [id])
  wastage   Wastage             @relation(fields: [wastageId], references: [id])

  @@index([variantId])
  @@index([productId], map: "wastage_details_productId_fkey")
  @@index([wastageId], map: "wastage_details_wastageId_fkey")
  @@map("wastage_details")
}

model DepotProductVariant {
  id                      Int                     @id @default(autoincrement())
  depotId                 Int
  productId               Int
  name                    String
  hsnCode                 String?
  minimumQty              Int                     @default(0)
  closingQty              Int                     @default(0)
  notInStock              Boolean                 @default(false)
  isHidden                Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  buyOncePrice            Decimal?                @db.Decimal(10, 2)
  price15Day              Decimal?                @db.Decimal(10, 2)
  price1Month             Decimal?                @db.Decimal(10, 2)
  price3Day               Decimal?                @db.Decimal(10, 2)
  price7Day               Decimal?                @db.Decimal(10, 2)
  mrp                     Decimal                 @default(0.00) @db.Decimal(10, 2)
  purchasePrice           Decimal?                @db.Decimal(10, 2)
  PurchaseDetail          PurchaseDetail[]
  StockLedger             StockLedger[]
  VariantStock            VariantStock[]
  deliveryScheduleEntries DeliveryScheduleEntry[]
  depot                   Depot                   @relation(fields: [depotId], references: [id], onDelete: Cascade)
  product                 Product                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  snfOrderItems           SNFOrderItem[]          @relation("VariantSNFOrderItems")
  subscriptions           Subscription[]
  transfersFrom           TransferDetail[]        @relation("TransferFromVariant")
  transfersTo             TransferDetail[]        @relation("TransferToVariant")
  orderItems              OrderItem[]
  wastageDetails          WastageDetail[]

  @@index([productId])
  @@index([depotId])
  @@map("depot_product_variants")
}

model StockLedger {
  id               Int                 @id @default(autoincrement())
  productId        Int
  variantId        Int
  depotId          Int
  transactionDate  DateTime            @db.Date
  receivedQty      Int                 @default(0)
  issuedQty        Int                 @default(0)
  module           String
  foreignKey       Int
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  productVariantId Int?
  depot            Depot               @relation(fields: [depotId], references: [id], onDelete: Cascade)
  product          Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  ProductVariant   ProductVariant?     @relation(fields: [productVariantId], references: [id])
  variant          DepotProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([variantId])
  @@index([depotId])
  @@index([productVariantId], map: "StockLedger_productVariantId_fkey")
}

model Transfer {
  id           Int              @id @default(autoincrement())
  transferNo   String           @unique
  transferDate DateTime         @db.Date
  fromDepotId  Int
  toDepotId    Int
  notes        String?          @db.Text
  createdById  Int?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  details      TransferDetail[]
  createdBy    User?            @relation("Transfer_createdBy", fields: [createdById], references: [id])
  fromDepot    Depot            @relation("TransferFromDepot", fields: [fromDepotId], references: [id], onDelete: Cascade)
  toDepot      Depot            @relation("TransferToDepot", fields: [toDepotId], references: [id], onDelete: Cascade)

  @@index([fromDepotId])
  @@index([toDepotId])
  @@index([createdById])
  @@map("transfers")
}

model TransferDetail {
  id                 Int                 @id @default(autoincrement())
  transferId         Int
  fromDepotVariantId Int
  toDepotVariantId   Int
  quantity           Int
  createdAt          DateTime            @default(now())
  fromVariant        DepotProductVariant @relation("TransferFromVariant", fields: [fromDepotVariantId], references: [id])
  toVariant          DepotProductVariant @relation("TransferToVariant", fields: [toDepotVariantId], references: [id])
  transfer           Transfer            @relation(fields: [transferId], references: [id], onDelete: Cascade)

  @@index([transferId])
  @@index([fromDepotVariantId])
  @@index([toDepotVariantId])
  @@map("transfer_details")
}

model ProductOrder {
  id                 Int            @id @default(autoincrement())
  orderNo            String         @unique
  memberId           Int
  totalQty           Int
  totalAmount        Float
  walletamt          Float          @default(0)
  payableamt         Float          @default(0)
  receivedamt        Float          @default(0)
  paymentMode        PaymentMode?
  paymentReferenceNo String?
  paymentDate        DateTime?
  paymentStatus      PaymentStatus  @default(PENDING)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  agencyId           Int?
  invoiceNo          String?        @unique
  invoicePath        String?
  agency             Agency?        @relation(fields: [agencyId], references: [id])
  member             Member         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  subscriptions      Subscription[]

  @@index([memberId])
  @@index([agencyId])
  @@map("product_orders")
}

/// SNF one-time checkout orders (non-subscription)
model SNFOrder {
  id            Int            @id @default(autoincrement())
  orderNo       String         @unique
  memberId      Int?
  name          String
  email         String?
  mobile        String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String?
  pincode       String
  subtotal      Float
  deliveryFee   Float          @default(0)
  totalAmount   Float
  paymentMode   PaymentMode?
  paymentStatus PaymentStatus  @default(PENDING)
  paymentRefNo  String?
  paymentDate   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  depotId       Int?
  invoiceNo     String?
  invoicePath   String?
  payableAmount Float          @default(0)
  walletamt     Float          @default(0)
  items         SNFOrderItem[]
  depot         Depot?         @relation(fields: [depotId], references: [id])
  member        Member?        @relation("MemberSNFOrders", fields: [memberId], references: [id])

  @@index([memberId])
  @@index([depotId])
  @@map("snf_orders")
}

model SNFOrderItem {
  id                    Int                  @id @default(autoincrement())
  orderId               Int
  depotProductVariantId Int?
  productId             Int?
  name                  String
  variantName           String?
  imageUrl              String?
  price                 Float
  quantity              Int
  lineTotal             Float
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  depotProductVariant   DepotProductVariant? @relation("VariantSNFOrderItems", fields: [depotProductVariantId], references: [id])
  order                 SNFOrder             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product               Product?             @relation("ProductSNFOrderItems", fields: [productId], references: [id])

  @@index([orderId])
  @@index([depotProductVariantId])
  @@index([productId])
  @@map("snf_order_items")
}

model Lead {
  id             Int        @id @default(autoincrement())
  name           String
  mobile         String
  email          String?
  plotBuilding   String
  streetArea     String
  landmark       String?
  pincode        String
  city           String
  state          String
  productId      Int?
  isDairyProduct Boolean    @default(false)
  notes          String?    @db.Text
  status         LeadStatus @default(NEW)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([status])
  @@index([isDairyProduct])
  @@index([pincode])
  @@map("leads")
}

enum Role {
  ADMIN
  AGENCY
  MEMBER
  VENDOR
  DepotAdmin
  SUPERVISOR
}

enum OrderStatus {
  PENDING
  DELIVERED
  RECEIVED
}

enum DeliverySchedule {
  DAILY
  DAY1_DAY2
  WEEKDAYS
  ALTERNATE_DAYS
}

enum DeliveryType {
  HandDelivery
  Courier
}

enum PaymentMode {
  ONLINE
  CASH
  UPI
  BANK
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  NOT_DELIVERED
  CANCELLED
  SKIPPED
  SKIP_BY_CUSTOMER
  INDRAAI_DELIVERY
  TRANSFER_TO_AGENT
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  PAID
  FAILED
}

enum LeadStatus {
  NEW
  CONTACTED
  CONVERTED
  CLOSED
}
