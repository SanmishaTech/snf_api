generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  name              String
  email             String        @unique
  password          String
  role              Role
  mobile            Int?
  active            Boolean       @default(true)
  lastLogin         DateTime?
  resetToken        String?
  resetTokenExpires DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  agency            Agency?
  deliveredOrders   VendorOrder[] @relation("DeliveredBy")
  receivedOrders    VendorOrder[] @relation("ReceivedBy")
  vendor            Vendor?
  member            Member?

  // Wallet / Transaction related fields
  initiatedTransactions Transaction[] @relation("UserTransactions")         // Transactions initiated by this user (member)
  processedTransactions Transaction[] @relation("AdminProcessedTransactions") // Transactions processed by this user (admin)

  // createdTransactions Transaction[] @relation("AdminTransactions") // This is replaced by the two new relations above
  @@map("users")
}

model Vendor {
  id                Int           @id @default(autoincrement())
  name              String
  contactPersonName String?       @map("contact_person_name")
  address1          String
  address2          String?
  city              String
  pincode           Int
  mobile            String
  alternateMobile   String?       @map("alternate_mobile")
  email             String?       @unique
  userId            Int           @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  orders            VendorOrder[]
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vendors")
}

model Agency {
  id                Int         @id @default(autoincrement())
  name              String
  contactPersonName String?     @map("contact_person_name")
  mobile            String
  address1          String
  address2          String?
  city              String
  pincode           Int
  alternateMobile   String?     @map("alternate_mobile")
  email             String?     @unique
  userId            Int         @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]
  subscriptions Subscription[]

  @@map("agencies")
}

model Product {
  id                Int         @id @default(autoincrement())
  name              String
  url               String?
  attachmentUrl     String?
  price             Float
  rate              Float
  deliveredQuantity Int?
  description       String?     @db.Text // New field for product description
  unit              String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  orderItems        OrderItem[]
  subscriptions Subscription[]
  deliveryScheduleEntries DeliveryScheduleEntry[]

  @@map("products")
}

model VendorOrder {
  id                Int         @id @default(autoincrement())
  poNumber          String?
  orderDate         DateTime
  deliveryDate      DateTime?
  vendorId          Int
  contactPersonName String?
  notes             String?
  status            OrderStatus @default(PENDING)
  deliveredById     Int?
  deliveredAt       DateTime?
  receivedById      Int?
  receivedAt        DateTime?
  totalAmount       Float?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  items             OrderItem[]
  deliveredBy       User?       @relation("DeliveredBy", fields: [deliveredById], references: [id])
  receivedBy        User?       @relation("ReceivedBy", fields: [receivedById], references: [id])
  vendor            Vendor      @relation(fields: [vendorId], references: [id])

  @@index([deliveredById], map: "vendor_orders_deliveredById_fkey")
  @@index([receivedById], map: "vendor_orders_receivedById_fkey")
  @@index([vendorId], map: "vendor_orders_vendorId_fkey")
  @@map("vendor_orders")
}

model OrderItem {
  id                Int         @id @default(autoincrement())
  vendorOrderId     Int
  productId         Int
  quantity          Int
  priceAtPurchase   Float
  agencyId          Int
  deliveredQuantity Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  receivedQuantity  Int?
  agency            Agency      @relation(fields: [agencyId], references: [id])
  product           Product     @relation(fields: [productId], references: [id])
  vendorOrder       VendorOrder @relation(fields: [vendorOrderId], references: [id], onDelete: Cascade)

  @@index([agencyId], map: "vendor_order_items_agencyId_fkey")
  @@index([productId], map: "vendor_order_items_productId_fkey")
  @@index([vendorOrderId], map: "vendor_order_items_vendorOrderId_fkey")
  @@map("vendor_order_items")
}

model Member {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addresses DeliveryAddress[]
  subscriptions Subscription[]
  deliveryScheduleEntries DeliveryScheduleEntry[]

  wallet    Wallet? // Relation to Wallet
  @@map("members")
}

enum Role {
  VENDOR
  AGENCY
  ADMIN
  MEMBER
}

enum OrderStatus {
  PENDING
  DELIVERED
  RECEIVED
}

model DeliveryAddress {
  id            Int      @id @default(autoincrement())
  memberId      Int
  recipientName String
  mobile        String
  plotBuilding  String
  streetArea    String
  landmark      String?
  pincode       String
  city          String
  state         String
  label         String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  member        Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  deliveryScheduleEntries DeliveryScheduleEntry[]

  @@map("delivery_addresses")
  @@index([memberId], map: "delivery_addresses_memberId_fkey")
}

// Enums for Subscriptions
enum DeliverySchedule {
  DAILY
  WEEKDAYS // maps to SELECT_DAYS in controller logic if weekdays are provided
  ALTERNATE_DAYS
}

enum PaymentMode {
  ONLINE
  CASH
  UPI
  BANK
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum DeliveryStatus {
  PENDING           // Default for future deliveries, or for today if not yet actioned
  DELIVERED         // Successfully delivered
  NOT_DELIVERED     // Attempted delivery but failed (e.g., customer not home, address issue)
  CANCELLED         // Delivery cancelled (e.g., due to product unavailability, or part of subscription cancellation)
  SKIPPED           // Skipped by the member
 }

model DeliveryScheduleEntry {
  id                Int         @id @default(autoincrement())
  subscription      Subscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade) // Added onDelete
  subscriptionId    Int            // Changed to Int
  member            Member         @relation(fields: [memberId], references: [id], onDelete: Cascade) // Added onDelete
  memberId          Int            // Changed to Int
  deliveryAddress   DeliveryAddress @relation(fields: [deliveryAddressId], references: [id], onDelete: Cascade) // Added onDelete
  deliveryAddressId Int            // Changed to Int
  product           Product        @relation(fields: [productId], references: [id], onDelete: Restrict) // Added onDelete (Restrict as product might be in other schedules)
  productId         Int
  deliveryDate      DateTime       @db.Date
  quantity          Int            @default(1) // Quantity for this specific delivery, default to 1
  status            DeliveryStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("delivery_schedule")
  @@index([subscriptionId])
  @@index([memberId])
  @@index([deliveryAddressId])
  @@index([productId])
  @@index([deliveryDate])
}

// Model for Subscriptions
model Subscription {
  id                  Int                @id @default(autoincrement())
  memberId            Int
  deliveryAddressId   Int
  productId           Int
  startDate           DateTime           @default(now()) // Date when the subscription effectively starts
  period              Int
  expiryDate          DateTime
  deliverySchedule    DeliverySchedule
  weekdays            String?            // To store JSON array of weekdays, e.g., ["MONDAY", "TUESDAY"] if schedule is WEEKDAYS
  qty                 Int
  altQty              Int?               // Optional: for alternate day deliveries if different quantity
  rate                Float              // Per unit price at the time of subscription
  totalQty            Int                // Calculated by application logic
  amount              Float              // Calculated by application logic: rate * totalQty

 
  walletamt           Float              @default(0)
  payableamt          Float              @default(0)
  receivedamt         Float              @default(0)
 
  paymentMode         PaymentMode?
  paymentReferenceNo  String?
  paymentDate         DateTime?
  paymentStatus       PaymentStatus      @default(PENDING)
  agencyId            Int?               // Optional: if subscription is linked to a specific agency for fulfillment
  createdAt           DateTime           @default(now()) // Date when the record was created
  updatedAt           DateTime           @updatedAt

  member            Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  deliveryAddress   DeliveryAddress   @relation(fields: [deliveryAddressId], references: [id], onDelete: Restrict)
  product           Product           @relation(fields: [productId], references: [id], onDelete: Restrict)
  agency            Agency?           @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  deliveryScheduleEntries DeliveryScheduleEntry[]

  @@index([memberId])
  @@index([deliveryAddressId])
  @@index([productId])
  @@index([agencyId])
  @@map("subscriptions")
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  PAID
  FAILED // Added FAILED status
  // Consider adding FAILED, CANCELLED, REFUNDED if needed in the future
}

model Wallet {
  id        Int      @id @default(autoincrement())
  memberId  Int      @unique // Foreign key to Member
  balance   Float    @default(0.0)
  currency  String   @default("INR") // Default currency, adjust as needed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member       Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  transactions Transaction[] // A wallet can have many transactions

  @@map("wallets")
}

model Transaction {
  id                 Int               @id @default(autoincrement())
  userId             Int?              // ID of the User (member) initiating the transaction. Made optional.
  amount             Float
  status             TransactionStatus @default(PENDING)
  type               TransactionType   // e.g., CREDIT for top-up, DEBIT for withdrawal
  walletId           Int?              // Foreign key to Wallet, set upon approval. Made optional.

  // Optional details from original model, can be kept
  paymentMethod      String?           // e.g., "Cash", "Bank Transfer", "UPI"
  referenceNumber    String?           // e.g., Cheque number, UPI transaction ID
  notes              String?           @db.Text

  processedByAdminId Int?              // Foreign key to User (admin who approved/processed the transaction). Renamed from adminId & made optional.
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  user               User?             @relation("UserTransactions", fields: [userId], references: [id]) // Relation to User is now optional
  wallet             Wallet?           @relation(fields: [walletId], references: [id], onDelete: Cascade) // Relation is now optional
  processedByAdmin   User?             @relation("AdminProcessedTransactions", fields: [processedByAdminId], references: [id]) // Renamed relation

  @@index([userId])                  // Index on optional field
  @@index([walletId])                // Existing index, field is now optional
  @@index([processedByAdminId])      // Index for renamed field
  @@map("transactions")
}
